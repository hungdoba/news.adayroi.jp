name: Test and Coverage

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type check
        run: pnpm type-check

      - name: Run linter
        run: pnpm lint

      - name: Run tests
        run: pnpm test:ci

      - name: Upload coverage reports to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Generate coverage badge
        if: matrix.node-version == '20.x' && github.ref == 'refs/heads/main'
        run: |
          npm install -g coverage-badge-creator
          coverage-badge-creator --output ./coverage/badge.svg

      - name: Comment coverage on PR
        if: matrix.node-version == '20.x' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Try to read coverage summary
            try {
              const coveragePath = path.join(process.cwd(), 'coverage', 'coverage-summary.json');
              if (fs.existsSync(coveragePath)) {
                const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
                const total = coverage.total;
                
                const comment = `## 📊 Test Coverage Report
                
                | Metric | Percentage | Status |
                |--------|------------|--------|
                | Statements | ${total.statements.pct}% | ${total.statements.pct >= 80 ? '✅' : '⚠️'} |
                | Branches | ${total.branches.pct}% | ${total.branches.pct >= 75 ? '✅' : '⚠️'} |
                | Functions | ${total.functions.pct}% | ${total.functions.pct >= 80 ? '✅' : '⚠️'} |
                | Lines | ${total.lines.pct}% | ${total.lines.pct >= 80 ? '✅' : '⚠️'} |
                
                ${total.statements.pct >= 80 && total.branches.pct >= 75 && total.functions.pct >= 80 && total.lines.pct >= 80 
                  ? '🎉 Great job! Coverage targets met.' 
                  : '⚠️ Some coverage targets not met. Consider adding more tests.'}
                `;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Could not generate coverage comment:', error.message);
            }
